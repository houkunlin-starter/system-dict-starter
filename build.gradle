plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "io.freefair.lombok" version "5.3.0"
    id 'maven-publish'
    id 'signing'
    id 'java-library'
    id 'application'
    id 'idea'
}

group = 'com.houkunlin'
version = '1.4.2'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

dependencies {
    compileOnly 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'
    testCompileOnly 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.springframework.boot:spring-boot-starter-amqp'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    api 'com.google.guava:guava:30.1.1-jre'
    api 'com.github.ben-manes.caffeine:caffeine'
    api 'org.javassist:javassist:3.28.0-GA'
    api 'io.swagger:swagger-annotations:1.6.2'

    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:+'
    testAnnotationProcessor 'org.projectlombok:lombok-mapstruct-binding:+'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            pom {
                name = project.name
                packaging = 'jar'
                description = project.name
                url = 'https://github.com/houkunlin/system-dict-starter'
                // properties = []
                licenses {
                    license {
                        name = 'Mulan Permissive Software License，Version 2'
                        url = 'https://license.coscl.org.cn/MulanPSL2'
                    }
                }
                developers {
                    developer {
                        id = 'houkunlin'
                        name = 'HouKunLin'
                        email = 'houkunlin@aliyun.com'
                    }
                }
                scm {
                    connection = 'scm:git://github.com/houkunlin/system-dict-starter.git'
                    developerConnection = 'scm:git://github.com/houkunlin/system-dict-starter.git'
                    url = 'git://github.com/houkunlin/system-dict-starter.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("ossrhUsername")
                password = findProperty("ossrhPassword") ?: System.getenv("ossrhPassword")
            }
            // 正式环境
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            // 非正式环境库
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
        maven {
            name = "buildDir"
            String releasesRepoUrl = "$buildDir/repos/releases"
            String snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    // 使用 gradle.properties 设置参数，或者在命令行中增加 -Pgpg_private_key= -Pgpg_password= 设置参数
    // 或者在环境变量中设置相应的环境变量
    String signingKey = findProperty("gpg_private_key") ?: System.getenv("gpg_private_key")
    if (signingKey != null) {
        String signingPassword = findProperty("gpg_password") ?: System.getenv("gpg_password")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications
    // sign configurations.archives
}

bootJar {
    enabled = false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
    enabled = true
    classifier("")
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    enabled = true
    options.encoding = "UTF-8"
    options.addStringOption('Xdoclint:none', '-quiet')
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

compileJava {
    options.encoding = "UTF-8"
}

test {
    useJUnitPlatform()
}
