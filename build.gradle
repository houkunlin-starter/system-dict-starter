plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "io.freefair.lombok" version "5.3.0"
    id 'maven-publish'
    id 'java-library'
    id 'application'
    id 'idea'
}

group = 'com.houkunlin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'
    testCompileOnly 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.springframework.boot:spring-boot-starter-amqp'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    api 'com.google.guava:guava:30.1.1-jre'
    api 'com.github.ben-manes.caffeine:caffeine'

    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:+'
    testAnnotationProcessor 'org.projectlombok:lombok-mapstruct-binding:+'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
        }
    }
}

bootJar {
    enabled = false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
    enabled = true
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    enabled = true
    options.encoding = "UTF-8"
    options.addStringOption('Xdoclint:none', '-quiet')
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

compileJava {
    options.encoding = "UTF-8"
}

test {
    useJUnitPlatform()
}
